A_program 
	|--A_programElement 
		|--A_fnDeclStmt 
			|--A_fnDecl fn getch(
				|--A_paramDecl )->
			|--A_type int;

	|--A_programElement 
		|--A_fnDeclStmt 
			|--A_fnDecl fn getint(
				|--A_paramDecl )->
			|--A_type int;

	|--A_programElement 
		|--A_fnDeclStmt 
			|--A_fnDecl fn putint(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar a:
						|--A_type int);

	|--A_programElement 
		|--A_fnDeclStmt 
			|--A_fnDecl fn putch(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar a:
						|--A_type int);

	|--A_programElement 
		|--A_fnDeclStmt 
			|--A_fnDecl fn putarray(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar n:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclArray a[10]:
						|--A_type int);

	|--A_programElement 
		|--A_fnDeclStmt 
			|--A_fnDecl fn _sysy_starttime(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar a:
						|--A_type int);

	|--A_programElement 
		|--A_fnDeclStmt 
			|--A_fnDecl fn _sysy_stoptime(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar a:
						|--A_type int);

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn mod(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar a:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar b:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_arithBiOpExpr 
							|--A_arithExpr 
								|--A_exprUnit a-
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit (
											|--A_arithExpr 
												|--A_arithBiOpExpr 
													|--A_arithExpr 
														|--A_exprUnit a/
													|--A_arithExpr 
														|--A_exprUnit b)*
									|--A_arithExpr 
										|--A_exprUnit b;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn pow(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar a:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar b:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar ans:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar base:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit a;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit b>
							|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar m:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 
											|--A_fnCall mod(
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit b, 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_exprUnit 2);

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolUnit (
								|--A_comExpr 
									|--A_exprUnit m==
									|--A_exprUnit 1)){

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal ans = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit ans*
												|--A_arithExpr 
													|--A_exprUnit base;
}

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal base = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit base*
										|--A_arithExpr 
											|--A_exprUnit base;

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal b = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit b/
										|--A_arithExpr 
											|--A_exprUnit 2;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit ans;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar a;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar b;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal a = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall getint();

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal b = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall getint();

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar ans;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal ans = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall pow(
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit a, 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit b);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putint(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit ans);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}
