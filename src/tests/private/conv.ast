A_program 
	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDef 
				|--A_varDefScalar max:
				|--A_type int = 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 1073741824;

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn checkrange(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar num:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit num>
							|--A_exprUnit max)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal num = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit num-
										|--A_arithExpr 
											|--A_exprUnit max;
}

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit num<
							|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal num = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit num+
										|--A_arithExpr 
											|--A_exprUnit max;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit num;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn mod(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar x:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar y:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_arithBiOpExpr 
							|--A_arithExpr 
								|--A_exprUnit x-
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_exprUnit (
											|--A_arithExpr 
												|--A_arithBiOpExpr 
													|--A_arithExpr 
														|--A_exprUnit x/
													|--A_arithExpr 
														|--A_exprUnit y)*
									|--A_arithExpr 
										|--A_exprUnit y;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn reduce(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar kernelid:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar x:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar y:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit kernelid==
							|--A_exprUnit 0)){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_fnCall checkrange(
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit x+
												|--A_arithExpr 
													|--A_exprUnit y);
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit kernelid==
							|--A_exprUnit 1)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar return_:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar i:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_whileStmt while(
							|--A_boolUnit (
								|--A_comExpr 
									|--A_exprUnit i<
									|--A_exprUnit max)){

							|--A_codeBlockStmt 
								|--A_ifStmt if(
									|--A_boolUnit (
										|--A_comExpr 
											|--A_exprUnit 
												|--A_fnCall mod(
												|--A_rightVal 
													|--A_arithExpr 
														|--A_arithBiOpExpr 
															|--A_arithExpr 
																|--A_exprUnit x/
															|--A_arithExpr 
																|--A_exprUnit i, 
												|--A_rightVal 
													|--A_arithExpr 
														|--A_exprUnit 2)==
											|--A_exprUnit 
												|--A_fnCall mod(
												|--A_rightVal 
													|--A_arithExpr 
														|--A_arithBiOpExpr 
															|--A_arithExpr 
																|--A_exprUnit y/
															|--A_arithExpr 
																|--A_exprUnit i, 
												|--A_rightVal 
													|--A_arithExpr 
														|--A_exprUnit 2))){

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal return_ = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_exprUnit return_*
														|--A_arithExpr 
															|--A_exprUnit 2;
}else{

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal return_ = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_arithBiOpExpr 
																|--A_arithExpr 
																	|--A_exprUnit return_*
																|--A_arithExpr 
																	|--A_exprUnit 2+
														|--A_arithExpr 
															|--A_exprUnit 1;
}

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal i = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit i*
												|--A_arithExpr 
													|--A_exprUnit 2;
}

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit return_;
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit kernelid==
							|--A_exprUnit 2)){

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolUnit (
								|--A_comExpr 
									|--A_exprUnit x>
									|--A_exprUnit y)){

							|--A_codeBlockStmt 
								|--A_returnStmt ret 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit x;
}else{

							|--A_codeBlockStmt 
								|--A_returnStmt ret 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit y;
}
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit kernelid==
							|--A_exprUnit 3)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar return_:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar i:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_whileStmt while(
							|--A_boolUnit (
								|--A_comExpr 
									|--A_exprUnit i<
									|--A_exprUnit max)){

							|--A_codeBlockStmt 
								|--A_ifStmt if(
									|--A_boolUnit (
										|--A_boolExpr 
											|--A_boolBiOpExpr 
												|--A_boolExpr 
													|--A_boolUnit (
														|--A_comExpr 
															|--A_exprUnit 
																|--A_fnCall mod(
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_arithBiOpExpr 
																			|--A_arithExpr 
																				|--A_exprUnit x/
																			|--A_arithExpr 
																				|--A_exprUnit i, 
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_exprUnit 2)==
															|--A_exprUnit 1)||
												|--A_boolExpr 
													|--A_boolUnit (
														|--A_comExpr 
															|--A_exprUnit 
																|--A_fnCall mod(
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_arithBiOpExpr 
																			|--A_arithExpr 
																				|--A_exprUnit y/
																			|--A_arithExpr 
																				|--A_exprUnit i, 
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_exprUnit 2)==
															|--A_exprUnit 1))){

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal return_ = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_arithBiOpExpr 
																|--A_arithExpr 
																	|--A_exprUnit return_*
																|--A_arithExpr 
																	|--A_exprUnit 2+
														|--A_arithExpr 
															|--A_exprUnit 1;
}else{

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal return_ = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_exprUnit return_*
														|--A_arithExpr 
															|--A_exprUnit 2;
}

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal i = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit i*
												|--A_arithExpr 
													|--A_exprUnit 2;
}

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit return_;
}

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit kernelid==
							|--A_exprUnit 4)){

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar return_:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_varDeclStmt let 
							|--A_varDef 
								|--A_varDefScalar i:
								|--A_type int = 
								|--A_rightVal 
									|--A_arithExpr 
										|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_whileStmt while(
							|--A_boolUnit (
								|--A_comExpr 
									|--A_exprUnit i<
									|--A_exprUnit max)){

							|--A_codeBlockStmt 
								|--A_ifStmt if(
									|--A_boolUnit (
										|--A_boolExpr 
											|--A_boolBiOpExpr 
												|--A_boolExpr 
													|--A_boolUnit (
														|--A_comExpr 
															|--A_exprUnit 
																|--A_fnCall mod(
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_arithBiOpExpr 
																			|--A_arithExpr 
																				|--A_exprUnit x/
																			|--A_arithExpr 
																				|--A_exprUnit i, 
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_exprUnit 2)==
															|--A_exprUnit 1)&&
												|--A_boolExpr 
													|--A_boolUnit (
														|--A_comExpr 
															|--A_exprUnit 
																|--A_fnCall mod(
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_arithBiOpExpr 
																			|--A_arithExpr 
																				|--A_exprUnit y/
																			|--A_arithExpr 
																				|--A_exprUnit i, 
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_exprUnit 2)==
															|--A_exprUnit 1))){

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal return_ = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_arithBiOpExpr 
																|--A_arithExpr 
																	|--A_exprUnit return_*
																|--A_arithExpr 
																	|--A_exprUnit 2+
														|--A_arithExpr 
															|--A_exprUnit 1;
}else{

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal return_ = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_exprUnit return_*
														|--A_arithExpr 
															|--A_exprUnit 2;
}

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal i = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit i*
												|--A_arithExpr 
													|--A_exprUnit 2;
}

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit return_;
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn getvalue(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray array[0]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar n:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar m:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar x:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar y:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_ifStmt if(
					|--A_boolUnit (
						|--A_boolExpr 
							|--A_boolBiOpExpr 
								|--A_boolExpr 
									|--A_boolBiOpExpr 
										|--A_boolExpr 
											|--A_boolBiOpExpr 
												|--A_boolExpr 
													|--A_boolUnit (
														|--A_comExpr 
															|--A_exprUnit x<
															|--A_exprUnit 0)||
												|--A_boolExpr 
													|--A_boolUnit (
														|--A_comExpr 
															|--A_exprUnit y<
															|--A_exprUnit 0)||
										|--A_boolExpr 
											|--A_boolUnit (
												|--A_comExpr 
													|--A_exprUnit x>=
													|--A_exprUnit n)||
								|--A_boolExpr 
									|--A_boolUnit (
										|--A_comExpr 
											|--A_exprUnit y>=
											|--A_exprUnit m))){

					|--A_codeBlockStmt 
						|--A_returnStmt ret 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;
}

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar tmp:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_arithBiOpExpr 
									|--A_arithExpr 
										|--A_arithBiOpExpr 
											|--A_arithExpr 
												|--A_exprUnit x*
											|--A_arithExpr 
												|--A_exprUnit m+
									|--A_arithExpr 
										|--A_exprUnit y;

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 
							|--A_arrayExpr 
							|--A_leftVal array[
								|--A_indexExpr tmp];
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn convn(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclScalar kernelid:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclArray input[0]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclArray output[0]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar n:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar m:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar c:
						|--A_type int)->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar i:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar j:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar x:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar y:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar curr:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar true:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 1;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit true==
							|--A_exprUnit true)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal j = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 0;

					|--A_codeBlockStmt 
						|--A_whileStmt while(
							|--A_boolUnit (
								|--A_comExpr 
									|--A_exprUnit true==
									|--A_exprUnit true)){

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal curr = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit 0;

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal x = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit i-
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_exprUnit c/
														|--A_arithExpr 
															|--A_exprUnit 2;

							|--A_codeBlockStmt 
								|--A_whileStmt while(
									|--A_boolUnit (
										|--A_comExpr 
											|--A_exprUnit true==
											|--A_exprUnit true)){

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal y = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_exprUnit j-
														|--A_arithExpr 
															|--A_arithBiOpExpr 
																|--A_arithExpr 
																	|--A_exprUnit c/
																|--A_arithExpr 
																	|--A_exprUnit 2;

									|--A_codeBlockStmt 
										|--A_whileStmt while(
											|--A_boolUnit (
												|--A_comExpr 
													|--A_exprUnit true==
													|--A_exprUnit true)){

											|--A_codeBlockStmt 
												|--A_assignStmt 
													|--A_leftVal curr = 
													|--A_rightVal 
														|--A_arithExpr 
															|--A_exprUnit 
																|--A_fnCall reduce(
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_exprUnit kernelid, 
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_exprUnit curr, 
																|--A_rightVal 
																	|--A_arithExpr 
																		|--A_exprUnit 
																			|--A_fnCall getvalue(
																			|--A_rightVal 
																				|--A_arithExpr 
																					|--A_exprUnit input, 
																			|--A_rightVal 
																				|--A_arithExpr 
																					|--A_exprUnit n, 
																			|--A_rightVal 
																				|--A_arithExpr 
																					|--A_exprUnit m, 
																			|--A_rightVal 
																				|--A_arithExpr 
																					|--A_exprUnit x, 
																			|--A_rightVal 
																				|--A_arithExpr 
																					|--A_exprUnit y));

											|--A_codeBlockStmt 
												|--A_assignStmt 
													|--A_leftVal y = 
													|--A_rightVal 
														|--A_arithExpr 
															|--A_arithBiOpExpr 
																|--A_arithExpr 
																	|--A_exprUnit y+
																|--A_arithExpr 
																	|--A_exprUnit 1;

											|--A_codeBlockStmt 
												|--A_ifStmt if(
													|--A_boolUnit (
														|--A_comExpr 
															|--A_exprUnit y>=
															|--A_exprUnit (
																|--A_arithExpr 
																	|--A_arithBiOpExpr 
																		|--A_arithExpr 
																			|--A_exprUnit j+
																		|--A_arithExpr 
																			|--A_arithBiOpExpr 
																				|--A_arithExpr 
																					|--A_exprUnit c/
																				|--A_arithExpr 
																					|--A_exprUnit 2))){

													|--A_codeBlockStmt break;
}
}

									|--A_codeBlockStmt 
										|--A_assignStmt 
											|--A_leftVal x = 
											|--A_rightVal 
												|--A_arithExpr 
													|--A_arithBiOpExpr 
														|--A_arithExpr 
															|--A_exprUnit x+
														|--A_arithExpr 
															|--A_exprUnit 1;

									|--A_codeBlockStmt 
										|--A_ifStmt if(
											|--A_boolUnit (
												|--A_comExpr 
													|--A_exprUnit x>=
													|--A_exprUnit (
														|--A_arithExpr 
															|--A_arithBiOpExpr 
																|--A_arithExpr 
																	|--A_exprUnit i+
																|--A_arithExpr 
																	|--A_arithBiOpExpr 
																		|--A_arithExpr 
																			|--A_exprUnit c/
																		|--A_arithExpr 
																			|--A_exprUnit 2))){

											|--A_codeBlockStmt break;
}
}

							|--A_codeBlockStmt 
								|--A_varDeclStmt let 
									|--A_varDef 
										|--A_varDefScalar tmp:
										|--A_type int = 
										|--A_rightVal 
											|--A_arithExpr 
												|--A_arithBiOpExpr 
													|--A_arithExpr 
														|--A_arithBiOpExpr 
															|--A_arithExpr 
																|--A_exprUnit i*
															|--A_arithExpr 
																|--A_exprUnit m+
													|--A_arithExpr 
														|--A_exprUnit j;

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal 
										|--A_arrayExpr 
										|--A_leftVal output[
											|--A_indexExpr tmp] = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_exprUnit curr;

							|--A_codeBlockStmt 
								|--A_assignStmt 
									|--A_leftVal j = 
									|--A_rightVal 
										|--A_arithExpr 
											|--A_arithBiOpExpr 
												|--A_arithExpr 
													|--A_exprUnit j+
												|--A_arithExpr 
													|--A_exprUnit 1;

							|--A_codeBlockStmt 
								|--A_ifStmt if(
									|--A_boolUnit (
										|--A_comExpr 
											|--A_exprUnit j>=
											|--A_exprUnit m)){

									|--A_codeBlockStmt break;
}
}

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;

					|--A_codeBlockStmt 
						|--A_ifStmt if(
							|--A_boolUnit (
								|--A_comExpr 
									|--A_exprUnit i>=
									|--A_exprUnit n)){

							|--A_codeBlockStmt break;
}
}

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclArray a[10000000]:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclArray b[10000000]:
				|--A_type int;

	|--A_programElement 
		|--A_varDeclStmt let 
			|--A_varDecl 
				|--A_varDeclArray kernelid[10000]:
				|--A_type int;

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn memmove(
				|--A_paramDecl 
					|--A_varDecl 
						|--A_varDeclArray dst[0]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclArray src[0]:
						|--A_type int, 
					|--A_varDecl 
						|--A_varDeclScalar n:
						|--A_type int){

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar i:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit i<
							|--A_exprUnit n)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal dst[
									|--A_indexExpr i] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal src[
											|--A_indexExpr i];

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}
}

	|--A_programElement 
		|--A_fnDef 
			|--A_fnDecl fn main(
				|--A_paramDecl )->
			|--A_type int{

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar c:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_fnCall getint();

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar n:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_fnCall getint();

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar m:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 
									|--A_fnCall getint();

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDecl 
						|--A_varDeclScalar len:
						|--A_type int;

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal len = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall getint();

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar ii:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit ii<
							|--A_exprUnit len)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal a[
									|--A_indexExpr ii] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall getint();

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal ii = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit ii+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal len = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 
								|--A_fnCall getint();

			|--A_codeBlockStmt 
				|--A_assignStmt 
					|--A_leftVal ii = 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit ii<
							|--A_exprUnit len)){

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal 
								|--A_arrayExpr 
								|--A_leftVal kernelid[
									|--A_indexExpr ii] = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_fnCall getint();

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal ii = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit ii+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar task:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit len;

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_starttime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 209);

			|--A_codeBlockStmt 
				|--A_varDeclStmt let 
					|--A_varDef 
						|--A_varDefScalar i:
						|--A_type int = 
						|--A_rightVal 
							|--A_arithExpr 
								|--A_exprUnit 0;

			|--A_codeBlockStmt 
				|--A_whileStmt while(
					|--A_boolUnit (
						|--A_comExpr 
							|--A_exprUnit i<
							|--A_exprUnit task)){

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall convn(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit 
										|--A_arrayExpr 
										|--A_leftVal kernelid[
											|--A_indexExpr i], 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit a, 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit b, 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit n, 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit m, 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit c);

					|--A_codeBlockStmt 
						|--A_callStmt 
							|--A_fnCall memmove(
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit a, 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_exprUnit b, 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit n*
										|--A_arithExpr 
											|--A_exprUnit m);

					|--A_codeBlockStmt 
						|--A_assignStmt 
							|--A_leftVal i = 
							|--A_rightVal 
								|--A_arithExpr 
									|--A_arithBiOpExpr 
										|--A_arithExpr 
											|--A_exprUnit i+
										|--A_arithExpr 
											|--A_exprUnit 1;
}

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall _sysy_stoptime(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit 312);

			|--A_codeBlockStmt 
				|--A_callStmt 
					|--A_fnCall putarray(
					|--A_rightVal 
						|--A_arithExpr 
							|--A_arithBiOpExpr 
								|--A_arithExpr 
									|--A_exprUnit n*
								|--A_arithExpr 
									|--A_exprUnit m, 
					|--A_rightVal 
						|--A_arithExpr 
							|--A_exprUnit a);

			|--A_codeBlockStmt 
				|--A_returnStmt ret 
				|--A_rightVal 
					|--A_arithExpr 
						|--A_exprUnit 0;
}
